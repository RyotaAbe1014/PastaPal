// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createIngredient = `-- name: CreateIngredient :one
INSERT INTO ingredients (
  id, name, ingredient_category_id
) VALUES (
  $1, $2, $3
)
RETURNING id, name, ingredient_category_id, created_at, updated_at
`

type CreateIngredientParams struct {
	ID                   pgtype.UUID
	Name                 string
	IngredientCategoryID pgtype.UUID
}

func (q *Queries) CreateIngredient(ctx context.Context, arg CreateIngredientParams) (Ingredient, error) {
	row := q.db.QueryRow(ctx, createIngredient, arg.ID, arg.Name, arg.IngredientCategoryID)
	var i Ingredient
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IngredientCategoryID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createIngredientCategory = `-- name: CreateIngredientCategory :one
INSERT INTO ingredient_categories (
  id, name
) VALUES (
  $1,
  $2
)
RETURNING id, name, created_at, updated_at
`

type CreateIngredientCategoryParams struct {
	ID   pgtype.UUID
	Name string
}

func (q *Queries) CreateIngredientCategory(ctx context.Context, arg CreateIngredientCategoryParams) (IngredientCategory, error) {
	row := q.db.QueryRow(ctx, createIngredientCategory, arg.ID, arg.Name)
	var i IngredientCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteIngredient = `-- name: DeleteIngredient :exec
DELETE FROM ingredients
WHERE id = $1
`

func (q *Queries) DeleteIngredient(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteIngredient, id)
	return err
}

const deleteIngredientCategory = `-- name: DeleteIngredientCategory :exec
DELETE FROM ingredient_categories
WHERE id = $1
`

func (q *Queries) DeleteIngredientCategory(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteIngredientCategory, id)
	return err
}

const getIngredient = `-- name: GetIngredient :one
SELECT id, name, ingredient_category_id, created_at, updated_at FROM ingredients
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetIngredient(ctx context.Context, id pgtype.UUID) (Ingredient, error) {
	row := q.db.QueryRow(ctx, getIngredient, id)
	var i Ingredient
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IngredientCategoryID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getIngredientCategory = `-- name: GetIngredientCategory :one
SELECT id, name, created_at, updated_at FROM ingredient_categories
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetIngredientCategory(ctx context.Context, id pgtype.UUID) (IngredientCategory, error) {
	row := q.db.QueryRow(ctx, getIngredientCategory, id)
	var i IngredientCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listIngredients = `-- name: ListIngredients :many
SELECT id, name, ingredient_category_id, created_at, updated_at FROM ingredients
ORDER BY name
`

func (q *Queries) ListIngredients(ctx context.Context) ([]Ingredient, error) {
	rows, err := q.db.Query(ctx, listIngredients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ingredient
	for rows.Next() {
		var i Ingredient
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.IngredientCategoryID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listIngredientsCategory = `-- name: ListIngredientsCategory :many
SELECT id, name, created_at, updated_at FROM ingredient_categories
ORDER BY name
`

func (q *Queries) ListIngredientsCategory(ctx context.Context) ([]IngredientCategory, error) {
	rows, err := q.db.Query(ctx, listIngredientsCategory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []IngredientCategory
	for rows.Next() {
		var i IngredientCategory
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateIngredient = `-- name: UpdateIngredient :one
UPDATE ingredients
  set name = $2,
  ingredient_category_id = $3
WHERE
  id = $1
RETURNING id, name, ingredient_category_id, created_at, updated_at
`

type UpdateIngredientParams struct {
	ID                   pgtype.UUID
	Name                 string
	IngredientCategoryID pgtype.UUID
}

func (q *Queries) UpdateIngredient(ctx context.Context, arg UpdateIngredientParams) (Ingredient, error) {
	row := q.db.QueryRow(ctx, updateIngredient, arg.ID, arg.Name, arg.IngredientCategoryID)
	var i Ingredient
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IngredientCategoryID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateIngredientCategory = `-- name: UpdateIngredientCategory :exec
UPDATE ingredient_categories
  set name = $2
WHERE id = $1
`

type UpdateIngredientCategoryParams struct {
	ID   pgtype.UUID
	Name string
}

func (q *Queries) UpdateIngredientCategory(ctx context.Context, arg UpdateIngredientCategoryParams) error {
	_, err := q.db.Exec(ctx, updateIngredientCategory, arg.ID, arg.Name)
	return err
}
