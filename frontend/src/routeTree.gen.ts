/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as authLoginImport } from './routes/(auth)/login'
import { Route as appRecipesImport } from './routes/(app)/recipes'
import { Route as appIngredientsImport } from './routes/(app)/ingredients'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const authLoginRoute = authLoginImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const appRecipesRoute = appRecipesImport.update({
  id: '/(app)/recipes',
  path: '/recipes',
  getParentRoute: () => rootRoute,
} as any)

const appIngredientsRoute = appIngredientsImport.update({
  id: '/(app)/ingredients',
  path: '/ingredients',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/(app)/ingredients': {
      id: '/(app)/ingredients'
      path: '/ingredients'
      fullPath: '/ingredients'
      preLoaderRoute: typeof appIngredientsImport
      parentRoute: typeof rootRoute
    }
    '/(app)/recipes': {
      id: '/(app)/recipes'
      path: '/recipes'
      fullPath: '/recipes'
      preLoaderRoute: typeof appRecipesImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/ingredients': typeof appIngredientsRoute
  '/recipes': typeof appRecipesRoute
  '/login': typeof authLoginRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/ingredients': typeof appIngredientsRoute
  '/recipes': typeof appRecipesRoute
  '/login': typeof authLoginRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/(app)/ingredients': typeof appIngredientsRoute
  '/(app)/recipes': typeof appRecipesRoute
  '/(auth)/login': typeof authLoginRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/ingredients' | '/recipes' | '/login'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/ingredients' | '/recipes' | '/login'
  id:
    | '__root__'
    | '/'
    | '/(app)/ingredients'
    | '/(app)/recipes'
    | '/(auth)/login'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  appIngredientsRoute: typeof appIngredientsRoute
  appRecipesRoute: typeof appRecipesRoute
  authLoginRoute: typeof authLoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  appIngredientsRoute: appIngredientsRoute,
  appRecipesRoute: appRecipesRoute,
  authLoginRoute: authLoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(app)/ingredients",
        "/(app)/recipes",
        "/(auth)/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/(app)/ingredients": {
      "filePath": "(app)/ingredients.tsx"
    },
    "/(app)/recipes": {
      "filePath": "(app)/recipes.tsx"
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
